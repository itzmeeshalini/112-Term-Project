from cmu_112_graphics import *
import random
import math
from Enzyme import *
from Mutation import *
import numpy as np
from numpy.linalg import inv

##########################################
# CITATIONS

# Matrix multiply method came from one of my previous homeworks
# image citations:
    # https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.chegg.com%2Fhomework-help%2F
    # questions-and-answers%2Fconditions-illustrated-might-atp-synthase-operate-reverse-
    # using-energy-atp-hydrolysis-pump-q46619862&psig=AOvVaw1XjrQ3E4hTBzwWkbTg1w-2&ust=
    # 1637789636530000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCJiMi_63r_QCFQAAAAAdAAAAABAE

    # https://www.google.com/url?sa=i&url=https%3A%2F%2Fmicrobenotes.com%2Fdna-polymerase
    # %2F&psig=AOvVaw1Rq5088FFLPW-qYsXIJSG7&ust=1637789747947000&source=images&cd=vfe&ved=
    # 0CAsQjRxqFwoTCMi6_rK4r_QCFQAAAAAdAAAAABAD
    
    # https://www.google.com/url?sa=i&url=https%3A%2F%2Fflexbooks.ck12.org%2Fcbook%2Fck-12-
    # biology-flexbook-2.0%2Fsection%2F1.17%2Fprimary%2Flesson%2Fenzymes-bio%2F&psig=AOvVaw0
    # GeDJR1JxQEVYQeMrZkAUq&ust=1637789835326000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCLDey
    # ty4r_QCFQAAAAAdAAAAABAD

##########################################
# Home Screen Mode
##########################################

def homeScreenMode_redrawAll(app, canvas):
    font = 'Sans 26'
    canvas.create_text(app.width/2, 150, text='Play Enzymes vs. Mutations!', font=font)

def homeScreenMode_keyPressed(app, event):
    app.mode = 'gameMode'

##########################################
# Win Screen
##########################################

def winMode_redrawAll(app, canvas):
    font = 'Sans 26'
    canvas.create_text(app.width/2, 150, text='You Win!', font=font)
    canvas.create_text(app.width/2, 200, text='Press a key for the next level!', font=font)

def winMode_keyPressed(app, event):
    app.mode = 'gameMode'
    app.mutationsKilled = 0
    app.level += 1
    resetConfigs(app)
    
##########################################
# Lose Screen
##########################################

def loseMode_redrawAll(app, canvas):
    font = 'Sans 26'
    canvas.create_text(app.width/2, 150, text='Aww man! You lose', font=font)
    canvas.create_text(app.width/2, 200, text='Press a key to redo level!', font=font)

def loseMode_keyPressed(app, event):
    app.mode = 'gameMode'
    app.mutationsKilled = 0
    resetConfigs(app)

##########################################
# Game Mode
##########################################

#GIANT timer fired program...may need to break it up into smaller functions
def gameMode_timerFired(app):
 pass

#function that takes care of what happens when mouse is dragged
def gameMode_mouseDragged(app, event):
    app.angle = - getAngle(app, event)

def getAngle(app, event):
    cx = app.width/2
    cy = app.height/2
    leg1 = cx - event.x
    leg2 = cy - event.y
    hypo = distance(cx, cy, event.x, event.y)
    angle = math.sin(leg1/hypo)
    return angle

def distance(x0, y0, x1, y1):
    return math.sqrt((x1 - x0)**2 + (y1 - y0)**2)
    

#calls all the drawing helper functions
def gameMode_redrawAll(app, canvas):
    drawBoard(app, canvas)
    canvas.create_text(20, app.height - 20, text = f'angle : {app.angle}')

##########################################
# Main App
##########################################
class Enzyme(object):
    
    def __init__(self, app, name, pointValue, imgUrl, index, count, scale):
        self.name = name
        self.pointValue = pointValue
        self.imgUrl = imgUrl
        self.image = app.loadImage(imgUrl)
        self.scale = scale
        self.image = app.scaleImage(self.image, scale)
        self.listIndex = index
        self.count = count
        self.times = []
        self.locations = []
        self.images = [self.image]*self.count
        if name == "DNA Polymerase":  
            self.left = []
        
        self.available = True
        self.notEnoughATP = True
        self.x = 0
        self.y = 0
        self.time = 0

    #sets the position in the top bar
    def setPosition(self, x, y):
        self.x = x
        self.y = y
    
    #changes the availability of the enzyme group
    def changeAvailability(self):
        #self.count -= 1
        self.available = True
        
    #updates the time for each enzyme on the board
    def updateTime(self):
        for i in range(len(self.times)):
            self.times[i] += 100
    
    #changes the image for the object if it needs to be changed
    def setImage(self, app, i, imgUrl):
        image = app.loadImage(imgUrl)
        self.images[i] = app.scaleImage(image, self.scale)

class Mutation(object):
    
    def __init__(self, app, name, imgUrl, hits, x, y, row, col):
        self.name = name
        self.imgUrl = imgUrl
        self.image = app.loadImage(imgUrl)
        self.image = app.scaleImage(self.image, 1/8)
        self.hits = hits
        self.x = x
        self.y = y
        self.row = row
        self.col = col
    
    def getHit(self):
        self.hits -= 1

#sets up all the initial helper variables
def appStarted(app):
    app.angle = - 1.5
    app.mode = 'homeScreenMode'
    app.level = 1
    #setLevelConfig(app, app.level)
    #setting up board configurations
    app.rows = 9
    app.cols = 9
    app.tileWidth = app.width//app.rows
    app.tileHeight = app.height//app.cols
    
    app.center = [app.width//2, app.height//4]
    app.timerDelay = 50

    #setting up enzyme card configurations
    app.cardWidth = 80
    app.cardHeight = 90
    app.cardImgWidth = 15
    app.cardImgHeight = 15
    
    #setting up shovel image configurations
    app.rotationMatrix = [[math.cos(0), - math.sin(0)],
                          [math.sin(0),   math.cos(0)]]
    
    #setting up starting enzyme configurations
    app.enzymes = []
    app.gameEnzymes = [["ATP Synthase", 25, "images/atp synthase.png", 1/4], 
                       ["DNA Polymerase", 50, "images/dna polymerase.png", 1/3], 
                       ["Caspase", 100, "images/caspase.png", 1/7], 
                       ["Star Shooter", 25, "images/atp synthase.png", 1/4]]
    app.availableEnzymeCount = 0
    
    app.wb = 1
    app.wt = 2
    app.xt = -1
    app.h = 1
    
    app.znews = [([0]*app.cols) for row in range(app.rows)]
    app.board = [([0]*app.cols) for row in range(app.rows)]
    
    x_angle = -math.pi/50
    
    app.rotation_x = [[1, 0, 0], 
                [0, math.cos(x_angle), - math.sin(x_angle)],
                [0, math.sin(x_angle), math.cos(x_angle)]]
    
    
    app.rotation_z = [[math.cos(app.angle), -math.sin(app.angle), 0],
                  [math.sin(app.angle), math.cos(app.angle), 0],
                  [0, 0 ,1]]
    
    app.translation = [[1, 0, -4.5],
                        [0, 1, -4.5], 
                        [0, 0,  1]]
    app.translation_back = [[1, 0, 4.5],
                   [0, 1, 4.5], 
                   [0, 0,  1]]
    
def gameMode_timerFired(app):
    app.rotation_z = [[math.cos(app.angle), -math.sin(app.angle), 0],
                  [math.sin(app.angle), math.cos(app.angle), 0],
                  [0, 0 ,1]]

def calculate_z_values(app):
    for row in range(app.rows):
        for col in range(app.cols):
            x0 = row
            y0 = col
            x1 = (row + 1)
            y1 = (col + 1)
            app.z_news[row][col] = [do_transformation(app, x0, y0), 
                                    do_transformation(app, x1, y0), 
                                    do_transformation(app, x1, y1), 
                                    do_transformation(app, x0, y1)]
                
def do_transformation(app, x, y):
    point = [[x], [y], [1]]
    
    point = matrix_multiplication(app.translation, point)
    new_point = matrix_multiplication(app.rotation_z, point)
    new_point = matrix_multiplication(app.rotation_x, new_point)
    new_point = matrix_multiplication(app.translation_back, new_point)

    z_new = new_point[2][0]
    return z_new

def gameMode_mousePressed(app, event):
    print(event)
    row, col = find_row_col(app, event)
    if row != -1 and col != -1:
        app.board = [([0]*app.cols) for row in range(app.rows)]
        app.board[row][col] = 1

#makes an empty 2dlist
#retrieved from 112 course website
def make2dList(rows, cols):
    return [ ([0] * cols) for row in range(rows) ]



#big function for drawing the main board
def drawBoard(app, canvas):
    for row in range(app.rows):
        for col in range(app.cols):
            x0 = row
            y0 = col
            x1 = (row + 1)
            y1 = (col + 1)
            if app.board[row][col] == 1:
                placeTile(app, x0, y0, x1, y1, canvas, 'white', row, col)
            else:
                placeTile(app, x0, y0, x1, y1, canvas, 'black', row, col)
 
#draws the atp image for every atp in the list

# def transform(app, x, y):
    
        
#     coeff = app.wb/((1 - y)*app.wt + y*app.wb)
#     x = coeff*(app.wt*x + app.xt*y)*200 + 400
#     y = coeff*app.h*y*200 + 400
    
#     return x, y

def transform(app, x, y):
    z_angle = 0
    
    
    point = [[x], [y], [1]]
    point = matrix_multiplication(app.translation, point)
    
    
    
    new_point = matrix_multiplication(app.rotation_z, point)
    new_point = matrix_multiplication(app.rotation_x, new_point)
    new_point = matrix_multiplication(app.translation_back, new_point)

        
    z_new = new_point[2][0]
    #print(z_new)

    x_new = new_point[0][0]/z_new
    y_new = new_point[1][0]/z_new


    return x_new*50 + 400, y_new*50 + 200

def find_row_col(app, event):
    for row in range(app.rows):
        for col in range(app.cols):
            x0 = row
            y0 = col
            x1 = (row + 1)
            y1 = (col + 1)
            isox1, isoy1 = transform(app, x0, y0)
            isox2, isoy2 = transform(app, x1, y0) 
            isox3, isoy3 = transform(app, x1, y1) 
            isox4, isoy4 = transform(app, x0, y1)
            
            print(row, col, isox1, isoy1)
            print(isox2, isoy2)
            print(isox3, isoy3)
            print(isox4, isoy4)
            
            if ((isox2 <= event.x <= isox3 and isoy2 <= event.y <= isoy4) or
                (isox1 <= event.x <= isox4 and isoy3 <= event.y <= isoy1)):
                print(row, col)
                return row, col
    return -1, -1
            


def gameMode_keyPressed(app, event):
    if event.key == 'Right':
        if app.angle <= -math.pi//2 + 0.25:
            app.angle += 0.25
    if event.key == 'Left':
        if app.angle >= -math.pi - 0.25:
            app.angle -= 0.25

#draws the ball for caspase's shots
 
# def placeTile(app, x0, y0, x1, y1, canvas, color):

#     isox0, isoy0 = getIsoCoordinates(app, x0, y0)
    
#     isox1, isoy1 = getIsoCoordinates(app, x1, y0)
    
#     isox2, isoy2 = getIsoCoordinates(app, x1, y1)
    
#     isox3, isoy3 = getIsoCoordinates(app, x0, y1)

#     canvas.create_polygon(isox0, isoy0, isox1, isoy1,
#                           isox2, isoy2, isox3, isoy3, 
#                           fill = color, outline = '#a9edff')
    
def placeTile(app, x0, y0, x1, y1, canvas, color, row, col):

    isox0, isoy0 = transform(app, x0, y0)
    
    isox1, isoy1 = transform(app, x1, y0)
    
    isox2, isoy2 = transform(app, x1, y1)
    
    isox3, isoy3 = transform(app, x0, y1)

    canvas.create_polygon(isox0, isoy0, isox1, isoy1,
                          isox2, isoy2, isox3, isoy3, 
                          fill = color, outline = '#a9edff')
    canvas.create_text((isox0 + isox2)/2, (isoy0 + isoy2)/2, text = f'{row}, {col}', fill = 'white')

def matrix_multiplication(a, b):
    columns_a = len(a[0])
    rows_a = len(a)
    columns_b = len(b[0])
    rows_b = len(b)

    result_matrix = [[j for j in range(columns_b)] for i in range(rows_a)]
    if columns_a == rows_b:
        for x in range(rows_a):
            for y in range(columns_b):
                sum = 0
                for k in range(columns_a):
                    sum += a[x][k] * b[k][y]
                result_matrix[x][y] = sum
        return result_matrix

    else:
        print("columns of the first matrix must be equal to the rows of the second matrix")
        return None
    
    

#does the reverse of getIsoCoordinates
#i solved the system of equations and rewrote the new variable formulas
#but i will change this when I get rotation working
def getCartesianCoordinates(app, x_grid, y_grid):
    x = (6*x_grid + app.cols*y_grid - app.height - 3*app.width)/5
    y = (app.cols*y_grid - 6*x_grid - app.height + 3*app.width)/5
    return(x, y)

runApp(width=1200, height=1200)