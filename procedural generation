from Enzyme import *
from Mutation import *
import random

def appStarted(app):
    
    app.gameEnzymes = [["ATP Synthase", 25, "images/atp synthase.png", 1/4], 
                       ["DNA Polymerase", 50, "images/dna polymerase.png", 1/3], 
                       ["Caspase", 25, "images/caspase.png", 1/7], 
                       ["Direct Shoot", 25, "images/atp synthase.png", 1/4]]
    

# just reset:
    app.currentTime = 0
    app.atp = []
    app.rotationMatrix = [[math.cos(0), - math.sin(0)],
                          [math.sin(0),   math.cos(0)]]
    app.progress = 0
    app.winTime = None
    app.hits = 0
    app.dragCard = False
    app.enzymeX = 0
    app.enzymeY = 0
    app.enzyme = None
    app.boardEnzymes = []
    app.mutations = []
    app.caspaseShoot = []
    for i in range(len(app.enzymes)):
        enzyme = app.enzymes[i]
        if isinstance(enzyme, Enzyme):
            enzyme.setPosition(80 + i*app.cardWidth, 5 + 5)
        else:
            enzyme[1], enzyme[2] = 80 + i*app.cardWidth, 5 + 5
    app.board = [([0] * app.cols) for row in range(app.rows)]
    app.mutationsKilled = 0
    app.progress = 0
    app.totalHits = app.setNumberMutations*app.hitsPerMutation
    row = random.randint(0, app.cols - 1)
    col = 0
    x, y = getCoordinates(app, row, col)
    app.mutations.append(Mutation(app, "Normal Mutation", app.url, app.hitsPerMutation, x, y, row, col))
    app.mutationsPassed = 1

def generateConfigs(app):
    randomSeed = random.seed(app.level)
    app.setNumberMutations = app.level
    if app.level < 10:
        app.hitsPerMutation = 5
    else:
        app.hitsPerMutation = random.randint(app.level//4, app.level//2, randomSeed)
    app.mutationTime = mutationTimeFunction(app.level)
    if app.level <= 1:
        app.availableEnzymeCount = 3
    elif app.level <= 2:
        app.availableEnzymeCount = 4
    
    for i in range(app.availableEnzymeCount):
        app.enzymes.append(Enzyme(app, app.availableEnzymes[i][0], app.availableEnzymes[i][1], app.availableEnzymes[i][2], len(app.enzymes), 3, 1/4))
    app.enzymes.append(["Shovel", 0, 0])


def mutationTimeFunction(x):
    return (0.5)**(x - 10) * 800

